snippet cxxt "cmake default" b
cmake_minimum_required(VERSION 3.1)

project($1)

add_compile_options(-g -Wall -O2 -std=c++14)

set(CMAKE_CXX_STANDARD 11)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(PROJECT_BINARY_DIR ${PROJECT_SOURCE_DIR}/build)

find_package(GTest REQUIRED)
find_package(Threads REQUIRED)

include_directories(${GTEST_INCLUDE_DIRS})

add_executable(${PROJECT_NAME} ${2:$1}.cpp)
target_link_libraries(${PROJECT_NAME} ${GTEST_BOTH_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${CMAKE_THREAD_LIBS_INIT})

add_test(Test ${PROJECT_NAME})
enable_testing()

add_custom_target(run
    COMMAND ${PROJECT_NAME}
    DEPENDS ${PROJECT_NAME}
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
)
endsnippet

snippet cxx "cmake default" b
cmake_minimum_required(VERSION 3.15)

project($1)

add_compile_options(-g -Wall -O2 -std=c++17)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(PROJECT_BINARY_DIR ${PROJECT_SOURCE_DIR})

include_directories(${PROJECT_SOURCE_DIR}/../include)
add_executable(${PROJECT_NAME}.out ${2:$1}.cpp)

add_custom_target(run
    COMMAND ${PROJECT_NAME}.out
    DEPENDS ${PROJECT_NAME}.out
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
)
endsnippet

